#3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (add()), вычитание (sub()), умножение (mul()), деление (truediv()).
# Данные методы должны применяться только к клеткам и выполнять
# увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.

class Cell:
    cell_count = 0
    def __init__(self,size):
        self.size = size
        Cell.cell_count += 1

# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.

    def __add__(self, other):
        return self.size + other.size

# a = Cell(10)
# b = Cell(20)
# print (a + b)

#Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества
# ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.

    def __sub__(self, other):
        if self.size < other.size:
            sub_result = "Нельзя вычесть из меньшей клетки большую"
        else:
            sub_result = self.size - other.size
        return sub_result

# a = Cell(10)
# b = Cell(20)
# print (a - b)

#Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.

    def __mul__(self, other):
        return self.size * other.size

# a = Cell(10)
# b = Cell(20)
# print (a * b)

#Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

    def __truediv__(self, other):
        return round(self.size / other.size)

# a = Cell(10)
# b = Cell(3)
# print (a / b)

#В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
#Метод должен возвращать строку вида **\n\n***..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
#Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: **\n\n.
#Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: **\n\n***.
#Подсказка: подробный список операторов для перегрузки доступен по ссылке.

#Раз двадцать перечитал, прежде чем догадался глянуть методичку ))) Верстальщики бяки

    def make_order(self, cell_row):
        i = 0
        while True:
            for el in range(cell_row):
                print("*",end="")
                i += 1
                if i == self.size:
                    break
            print("\n")
            if i == self.size:
                 break

# a = Cell(12)
# a.make_order(5)

#Еще вариант:

    def make_order2(self, cell_row):
        for row in range(self.size // cell_row):
            for el in range(cell_row):
                print("*",end="")
            print("\n")
        for el in range(self.size % cell_row):
            print("*", end="")
        print()

# a = Cell(18)
# a.make_order2(7)
# b = Cell(20)
# c = Cell(3)
# print(Cell.cell_count)
